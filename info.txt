TODO: 
Convert this text to github project
Once the project has required tasks and bugs completed -> clean code -> update pkg code to be an api -> write readme -> clean git history -> gh versioning -> make public

Required:
- rethink state data
- search (this should have a map from a from search term to struct with a ref to the node and other meta data) 
  - fzf
- readme
- Runner needs a rethink
  - smaller results panel below results that has meta data and logs
  -> This is mostly done it just needs dynamic data (most of the meta data needs to be included in a response from runner)
  - need to investigate further into what classifies as an error in go test cmds
- packagerise code (api should probably have a different go mod so it can be imported indepentanly)
- clean code 
  - keymaps should be function calls not inline
- add pop up config display (Needs a form for runtime altering)

Nice to have: 
- parsing of my own -> strip unused text -> color important parts (highlight filepath -> good for finding where a panic happened)
- a lot more options need to be read in from config
- theming (Is there tview themeing I can use instead)
- Create/modify config in app (this should be stateless, modify yaml for persistent settings)
- add results state to test in tree (tick or cross emoji??) -> this does not persist longer than the session
- add a helper modal that shows all keybindings
- add switch focus to results 
  - search 
  - scroll
  - copy 

Bug:
- TODOs in code
- There is a bug to do with how privimatives are listening for key presses. Global keys require to be pressed twice??
- go test on a file with a failing test case does not run the test?? This is the same behaviour as running go test -run filename. Look at alternative ways
- some ui impovement to change screen when rerunning test
  -> seems like returning the event is what cause the execution. This means there is no easy way to change the screen while the test runs.

Notes
- Check if it might make more sence to call go test package instead of using os.exec
- check if a tparse integration works better than piping (piping can be made nicer later)
- optimize with concurrency


TODO: 
- console should have drop down for each large field (outputs and errors)
- Optimize with concurrency
- Create multiple different types of tests and get them working -> t.Run("static", ...) -> static, map, embeded, ...
- If struct has implicit initialisation test cases won't show up, is there a solution to this?
- dynamic resizing of panels if context is too wide (mainly tree)
- File test (needs a deep dive, seems like easiest way is to run all tests in the file instead of including all deps in test cmd)
- H should close current level and select one above (will need to try this out to see if it feels better)
- open test in editor. Requires config to be updated

Bug:
- running gotex without a go repo shows no error
- Scrolling moves out of app? is this all terminals? is this tmux?
- config pane is transparent
- What happens if you hit run too many times? How to control ongoing tests.. only one in flight?
- There is a bug to do with how privimatives are listening for key presses. Global keys require to be pressed twice??
- move logs to .local/share/gotex
- TODOs in code
- syncing causes panic

Hacks to look back at:
- If t.Run is called more than once the function is duplicated each with one test case being the name of that call
  -  post processing hack to merge any cases into duplicate functions within a file

Search Enchancement:
- filter by type (files, functions...)
- modify font for match characters
- emojies showing the type eg. same as tree icons 
- Needs testing -> internal/store/mapper_test.go/Test_toReports will only show up by searching `store/toreport`. searching `toreport` will show unrelated things, how can letter inorder be weighted higher

Results Enchancement:
- Some form of overview (thinking tick cross icons on test tree)
- Test results page should have navigation:
  - search
  - scroll
  - G + gg 
  - copy

Config Enchancement: 
- Custom themes 
- Runtime config manipulation (look at keys to jump to text fields)
- take config logic and make it a seperate project with clearer code and reusablity
  - This ideally is the tool logic of checking envvar then ~/.config then default the config

Might do:
- Create my own test result parser??
- Add a helper modal that shows all keybindings (for current panel) -> page helpers should also update depending on where the focus is 
